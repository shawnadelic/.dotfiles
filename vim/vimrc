" Use <Space> as leader
let mapleader = "\<Space>"

" Fix problem with Vundle
" https://github.com/VundleVim/Vundle.vim/issues/622
" TODO: Probably not be necessary after all, will delete
" set shell=bash

" Search settings
set incsearch  " Incremental search (while typing)
set hlsearch  " Highlight search terms

" Hide search highlight by pressing Enter key
nnoremap <cr> :nohlsearch<CR>:<backspace>
nnoremap <cr> :nohlsearch<CR><CR>:<backspace><backspace>

" Initialize Vundle
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" Vundle plugin manager
Plugin 'VundleVim/Vundle.vim'

if (v:version >= 704)
    " AutoComplete
    Plugin 'Valloric/YouCompleteMe'

    " Snippets (not sure how much I use this)
    Plugin 'SirVer/ultisnips'
endif

" Misc
Plugin 'honza/vim-snippets'

" Airliner
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

" Badwolf Theme
Plugin 'sjl/badwolf'

" Recently-opened files
Plugin 'mru.vim'

" Ack
Plugin 'mileszs/ack.vim'

" Bracket mappings (rarely use, maybe remove)
Plugin 'tpope/vim-unimpaired'

" Markers
Plugin 'kshenoy/vim-signature'

" Language or file-based syntax highlighting
Plugin 'keith/swift.vim'
"Plugin 'pangloss/vim-javascript'
"Plugin 'chemzqm/vim-jsx-improve'
"Plugin 'styled-components/vim-styled-components'
Plugin 'tweekmonster/django-plus.vim'
"Plugin 'jbgutierrez/vim-babel'
"Plugin 'leafgarland/typescript-vim'
"Plugin 'peitalin/vim-jsx-typescript'
Plugin 'heavenshell/vim-jsdoc'
Plugin 'junegunn/vim-plug'
Plugin 'lepture/vim-jinja'
"Plugin 'jparise/vim-graphql'
Plugin 'hashivim/vim-terraform'
Plugin 'jvirtanen/vim-hcl'
Plugin 'raimon49/requirements.txt.vim'
"Plugin 'posva/vim-vue'
"Plugin 'jason0x43/vim-js-indent'
"Plugin 'HerringtonDarkholme/yats'
Plugin 'cespare/vim-toml'
"Plugin 'numirias/semshi'
"Plugin 'dense-analysis/ale'

" This guy's a genius:
" https://blog.wildsky.cc/en/posts/vim-typescriptreact-redrawtime-exceeded-syntax-highlighting-disabled
" https://jameschambers.co.uk/vim-typescript-slow
Plugin 'leafgarland/typescript-vim'
Plugin 'peitalin/vim-jsx-typescript'
Plugin 'othree/yajs.vim'
autocmd BufRead,BufNewFile *.tsx,*.jsx set ts=2 sw=2 sts=2 filetype=typescript.typescriptreact
autocmd BufRead,BufNewFile *.ts set ts=2 sw=2 sts=2 filetype=typescript

"https://github.com/HerringtonDarkholme/yats.vim
" From docs:
"   'set re=0 explicitly in your vimrc. Old regexp engine will incur performance
"    issues for yats and old engine is usually turned on by other plugins.'
set re=0

"let g:jsx_ext_required = 0
" Syntastic syntax  checking
"Plugin 'vim-syntastic/syntastic' "XXX: Disabling for now, glitching vim

" Python-linting
Plugin 'nvie/vim-flake8'
Plugin 'fisadev/vim-isort'

" Better Python styling
Plugin 'Vimjas/vim-python-pep8-indent'

" Vim markdown syntax
Plugin 'godlygeek/tabular'
" Plugin 'plasticboy/vim-markdown'

" Preview markdown files - Ctrl + p
" NOTE: Requires grip (should be installed by setup script)
" Plugin 'JamshedVesuna/vim-markdown-preview'
Plugin 'shime/vim-livedown'

" Markdown preview settings
" let vim_markdown_preview_github=1
" let vim_markdown_preview_browser='Google Chrome'
" let vim_markdown_preview_use_xdg_open=1  " https://github.com/JamshedVesuna/vim-markdown-preview/issues/83

" Fzf fuzzyfinder
Plugin 'junegunn/fzf'

" Vim Wiki
Plugin 'vimwiki/vimwiki'

" Better tab jumping
" TODO: Fork and make improvements
Plugin 'ipod825/TagJump'

" NERD Commenter
Plugin 'scrooloose/nerdcommenter'

" Vim fugitive - Git integration
Plugin 'tpope/vim-fugitive'

" Code folding
Plugin 'tmhedberg/simpylfold'

" Folding settings
set foldlevelstart=99

" Dash integration (Mac-only)
Plugin 'rizzatti/dash.vim'
nmap <silent> <leader>d <Plug>DashSearch

" Airline settings
set t_Co=256
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
set laststatus=2
let g:airline_theme='kolor'
set guifont=DejaVu\ Sans\ Mono\ for\ Powerline:s14
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.whitespace = 'Ξ'

" Ultisnips settings
" Not using tab to expand
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
let g:UltiSnipsEditSplit="vertical"

let g:airline#extensions#tabline#enabled = 1
" let g:airline#extensions#tabline#buffer_idx_mode = 1

" Start vundle
call vundle#end()
filetype plugin indent on

" Syntax highlighting settings
syntax enable
autocmd BufRead,BufNewFile *.jinja set filetype=jinja
autocmd BufRead,BufNewFile *.html set filetype=htmldjango
autocmd BufRead,BufNewFile *.html set ts=2 sw=2 sts=2
autocmd BufRead,BufNewFile *.yml set ts=2 sw=2 sts=2
autocmd BufRead,BufNewFile *.tfvars set ts=2 sw=2 sts=2
autocmd BufRead,BufNewFile *.tf set ts=2 sw=2 sts=2
autocmd BufRead,BufNewFile *.css set ts=2 sw=2 sts=2
"autocmd BufRead,BufNewFile *.{tsx,ts} set ts=2 sw=2 sts=2 filetype=typescript
"autocmd BufRead,BufNewFile *.{jsx,js} set ts=2 sw=2 sts=2 filetype=javascript
autocmd BufRead,BufNewFile *.js set ts=2 sw=2 sts=2 filetype=javascript
autocmd BufRead,BufNewFile *.json set ts=2 sw=2 sts=2
autocmd BufRead,BufNewFile README set filetype=markdown
autocmd BufRead,BufNewFile Dockerfile* set filetype=dockerfile
autocmd BufRead,BufNewFile .env.* set filetype=sh
autocmd BufRead,BufNewFile .babelrc set filetype=javascript
autocmd BufRead,BufNewFile supervisord.conf setf dosini

" Project-specific settings
" autocmd BufRead,BufEnter /Users/shawnhmh/workspace/fx/fx-cms-new/*.{js,ts,jsx,tsx} set ts=2 sw=2 sts=2
autocmd BufRead,BufNewFile .eslintrc set filetype=json ts=2 sw=2 sts=2
autocmd BufRead,BufNewFile .prettierrc set filetype=json ts=2 sw=2 sts=2

" Ctags settings
set tags=tags;/

" Fix YouCompleteMe preview window from not closing
if (v:version > 704)
    autocmd CompleteDone * pclose
endif

" Python 2 interpretter for YCM
let g:ycm_server_python_interpreter = "python3"

" Flake8 key mapping - <Space> + f
autocmd FileType python nnoremap <leader>f :call Flake8()<CR>

" Execute current file with python - <Space> + p + y
autocmd FileType python nnoremap <leader>py :!python %:p<CR>

" Leader mapping to insert ipdb breakpoint
" NOTE: Temporarily setting to pdb due to async errors
" autocmd FileType python nnoremap <leader>pdb oimport ipdb; ipdb.set_trace()<Esc>+
autocmd FileType python nnoremap <leader>pdb oimport pdb; pdb.set_trace()<Esc>+
autocmd FileType python nnoremap <leader>log oimport logging; logger = logging.getLogger(__name__)  # noqa

" Use the same shortcut (pdb) to insert breakpoint in JS...because
autocmd FileType typescript nnoremap <leader>pdb odebugger<Esc>+
autocmd FileType javascript nnoremap <leader>pdb odebugger<Esc>+
autocmd FileType typescriptreact nnoremap <leader>pdb odebugger<Esc>+
autocmd FileType javascriptreact nnoremap <leader>pdb odebugger<Esc>+

" Shortcuts and fixes for typos
" Was `command`, replaced with `cnoreabbrev`
nnoremap <leader>q :q<CR>
nnoremap <leader>q! :q!<CR>
nnoremap <leader>w :w<CR>
nnoremap <leader>wq :wq<CR>
cnoreabbrev W w
cnoreabbrev Q q
cnoreabbrev Q! q!

" Better titles for tmux
autocmd BufEnter * call system("tmux rename-window " . expand("%:t:r"))
autocmd VimLeave * call system("tmux rename-window '  '")
set title

" Set Quickfix window height to be taller
let g:flake8_quickfix_height=20

" Get rid of ex mode--I never use it anyway
map Q <Nop>

"autocmd FileType qf nnoremap <buffer> <CR> <CR>:lclose<CR>

" Close QuickFix and Preview Windows
" This is easier than remembering each individual command (plus I made a
" shortcut below)
function! Close()
    lclose
    cclose
    pclose
    helpclose
endfunction

" Shortcut for Close - <Space> + c
nnoremap <leader>c :call Close()<CR>

" Vim markdown settings
" let g:vim_markdown_folding_disabled = 1

" Hide banner for netrw
let g:netrw_banner = 0
let g:netrw_winsize = 25

" FZF settings
" https://github.com/junegunn/fzf
set rtp+=~/.fzf
let g:fzf_colors =
            \ { 'fg':      ['fg', 'Normal'],
            \ 'bg':      ['bg', 'Normal'],
            \ 'hl':      ['fg', 'Comment'],
            \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
            \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
            \ 'hl+':     ['fg', 'Statement'],
            \ 'info':    ['fg', 'PreProc'],
            \ 'prompt':  ['fg', 'Conditional'],
            \ 'pointer': ['fg', 'Exception'],
            \ 'marker':  ['fg', 'Keyword'],
            \ 'spinner': ['fg', 'Label'],
            \ 'header':  ['fg', 'Comment'] }

function! HashedString(string)
    let git_branch = "master"
    let hash_length = 20
    return substitute(system("echo -n " . a:string . " | md5sum | cut -c-" . hash_length), '\n\+$', '', '')
    unlet git_branch
    unlet hash_length
endfunc

" This is actually kind of useful - Use different swap directory
" for each git branch.
"
"" TODO: Use subdirectory for specific repos
"function! SetVimDir(...)
"    let verbose = "false"
"    if exists("a:1") && (a:1 == "verbose")
"        let verbose = "true"
"    endif
"    if verbose == "true"
"        echo "Verbose Mode"
"    endif

"    " It git branch, make new directory
"    " If no git branch, keep default dir
"    let parent_dir = substitute(expand("%:p:h"), '\n+\$', '', '')
"    let git_branch = substitute((system('cd ' . parent_dir . ' | git symbolic-ref --short HEAD 2>/dev/null')), '\n\+$', '', '')
"    if git_branch != ""

"        let repo_name = split(system("git remote -v | grep '(fetch)'"))[1]
"        let file_path = substitute(expand("%:p:h"), '\n\+$', '', '')

"        let git_branch_hash = HashedString(repo_name)
"        let repo_name_hash = HashedString(repo_name)
"        let file_path_hash = HashedString(file_path)

"        let dir_name = '/home/shawn/.tmp/git/' . repo_name_hash . '/' . git_branch_hash . '/' . file_path_hash

"        " Make branch directory if doesn't exit
"        if verbose
"            echo("Verifying directory " . dir_name . " exists")
"        endif
"        call system('mkdir -p ' . dir_name)
"        let &dir=dir_name
"        unlet repo_name
"        unlet dir_name
"    endif

"    unlet git_branch
"    unlet verbose
"endfunc
""call SetVimDir() - XXX: Fix this to default to user's home directory

" Tab and indentation settings
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab
set autoindent
set tabpagemax=100

" Fix issues with syntax disappearing
syntax sync minlines=256

" Language-specific formatting settings
autocmd FileType javascript setlocal ts=2 sw=2 sts=2

" Matching braces, etc
set showmatch

" Menu autocomplete - Show all choices
set wildmode=list:longest

" Clipboard
set clipboard^=unnamed

" Color scheme
colorscheme badwolf
syntax on
hi Normal ctermbg=None
hi NonText ctermbg=None

" Fix key-map collision between YCM and UltiSnips
"
" TODO: Get this working
"
" let g:ycm_key_list_select_completion = ['<C-n>']
" let g:ycm_key_list_previous_completion = ['<C-p>']
" let g:UltiSnipsExpandTrigger="<tab>"
" autocmd FileType python nnoremap <leader><leader> :call UltiSnips#ExpandSnippet()<CR>
" autocmd FileType python nnoremap <leader><leader> :call UltiSnips#ExpandSnippet()<CR>
"
" Plugin 'ervandew/supertab'
"
" Supertab settings
" let g:SuperTabDefaultCompletionType = '<C-n>'
"
" Better key bindings for UltiSnipsExpandTrigger
" let g:UltiSnipsExpandTrigger="<cr>"
" let g:UltiSnipsJumpForwardTrigger="<c-j>"
" let g:UltiSnipsJumpBackwardTrigger="<c-k>"

" Syntastic settings
"let g:syntastic_javascript_checkers=['eslint']
"let g:syntastic_mode_map = { 'mode': 'passive' }
" Disable error checking
let g:ycm_show_diagnostics_ui = 0
"let g:ycm_update_diagnostics_in_insert_mode = 0
":highlight SignColumn guibg=darkgrey
"set signcolumn=yes
" Disable modeline (keep enabled to display errors)
set nomodeline

" Write this in your vimrc file
let g:ale_set_loclist = 0
let g:ale_set_quickfix = 1
let g:ale_keep_list_window_open = 1
let b:ale_linters = {'javascript': ['eslint']}
"let g:ale_sign_column_always = 1

set backupdir=~/.vim/backup
set directory=~/.vim/swap

" Use F2 to toggle paste on/off before and after pasting
set pastetoggle=<F2>

" au filetype htmldjango call DisableIndent()

function! DisableIndent()
    " set autoindent&
    " set cindent&
    " set smartindent&
    set indentexpr&
endfunction

" Explicit backspacing? Required, apparently
set backspace=indent,eol,start

" Trying this out
" cnoreabbrev Ack Ack!
nnoremap <Leader>a :Ack!<Space>

function!   QuickFixOpenAll()
    if empty(getqflist())
        return
    endif
    let s:prev_val = ""
    for d in getqflist()
        let s:curr_val = bufname(d.bufnr)
        if (s:curr_val != s:prev_val)
            exec "edit " . s:curr_val
        endif
        let s:prev_val = s:curr_val
    endfor
endfunction

Plugin 'powerline/powerline-fonts'

" https://stackoverflow.com/questions/36601789/disable-for-good-vims-number-increment-that-is-mapped-to-ctrl-a
map <C-a> <Nop>


function! CloseHiddenBuffers()
    let i = 0
    let n = bufnr('$')
    while i < n
        let i = i + 1
        if bufloaded(i) && bufwinnr(i) < 0
            exe 'bd ' . i
        endif
    endwhile
endfun

" Not working
" https://github.com/ycm-core/YouCompleteMe/issues/3723
"function! Lint()
"    let g:ycm_show_diagnostics_ui = 1
"    call sign_unplacelist(filter(sign_getplaced('%')[0].signs, {idx, val-> !match(val.name, 'Ycm')}))

"    hi clear Error
"    hi clear Todo
"    hi clear SpellBad
"    hi clear SpellCap
"endfun


function! TrimWhitespace()
    let l:save = winsaveview()
    keeppatterns %s/\s\+$//e
    call winrestview(l:save)
endfun
