" Use <Space> as leader
let mapleader = "\<Space>"

" Fix problem with Vundle
" https://github.com/VundleVim/Vundle.vim/issues/622
" TODO: Probably not be necessary after all, will delete
" set shell=bash

" Search settings
set incsearch  " Incremental search (while typing)
set hlsearch  " Highlight search terms

" Turn off search highlight by pressing Enter key
nnoremap <cr> :nohlsearch<CR>:<backspace>

" Initialize Vundle
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'VundleVim/Vundle.vim'

if (v:version >= 704)
  " AutoComplete
  Plugin 'Valloric/YouCompleteMe'

  " Snippets (not sure how much I use this)
  Plugin 'SirVer/ultisnips'
endif

" Misc
Plugin 'honza/vim-snippets'

" Airliner
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

" Badwolf Theme
Plugin 'sjl/badwolf'

" Recently-opened files
Plugin 'mru.vim'

" Ack
Plugin 'mileszs/ack.vim'

" Bracket mappings (rarely use, maybe remove)
Plugin 'tpope/vim-unimpaired'

" Markers
Plugin 'kshenoy/vim-signature'

" Language-based syntax highlighting
Plugin 'keith/swift.vim'
Plugin 'pangloss/vim-javascript'
Plugin 'mxw/vim-jsx'

" Python-linting
Plugin 'nvie/vim-flake8'

" Vim markdown syntax
Plugin 'godlygeek/tabular'
Plugin 'plasticboy/vim-markdown'

" Fzf fuzzyfinder
Plugin 'junegunn/fzf'

" Better tab jumping
" TODO: Fork and make improvements
Plugin 'ipod825/TagJump'

" NERD Commenter
Plugin 'scrooloose/nerdcommenter'

" Airline settings
set t_Co=256
if !exists('g:airline_symbols')
        let g:airline_symbols = {}
endif
set laststatus=2
let g:airline_theme='durant'
set guifont=DejaVu\ Sans\ Mono\ for\ Powerline:s14
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.whitespace = 'Ξ'

" Ultisnips settings
" Not using tab to expand
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
let g:UltiSnipsEditSplit="vertical"

" Start vundle
call vundle#end()
filetype plugin indent on

" Syntax highlighting settings
syntax enable
autocmd BufRead,BufNewFile *.jinja set filetype=jinja
autocmd BufRead,BufNewFile README set filetype=markdown

" Ctags settings
set tags=tags;/

" Fix titles
autocmd BufEnter * let &titlestring = ' ' . expand("%:t")
set title

" Fix YouCompleteMe preview window from not closing
if (v:version > 704)
  autocmd CompleteDone * pclose
endif

" Python 2 interpretter for YCM
let g:ycm_server_python_interpreter = "/usr/bin/python"

" Flake8 key mapping - <Space> + f
autocmd FileType python nnoremap <leader>f :call Flake8()<CR>

" Shortcuts and fixes for typos
" Was `command`, replaced with `cnoreabbrev`
nnoremap <leader>q :q<CR>
nnoremap <leader>q! :q!<CR>
nnoremap <leader>wq :wq<CR>
cnoreabbrev W w
cnoreabbrev Q q
cnoreabbrev Q! q!

" Better titles for tmux
autocmd BufEnter * call system("tmux rename-window " . expand("%:t:r"))
autocmd VimLeave * call system("tmux rename-window '  '")
autocmd BufEnter * let &titlestring = ' ' . expand("%:t")
set title

" Set Quickfix window height to be taller
let g:flake8_quickfix_height=20

" Get rid of ex mode--I never use it anyway
map Q <Nop>

"autocmd FileType qf nnoremap <buffer> <CR> <CR>:lclose<CR>

" Close QuickFix and Preview Windows
function! Close()
  lclose
  cclose
  pclose
  helpclose
endfunction

" Shortcut for Close - <Space> + c
nnoremap <leader>c :call Close()<CR>

" Vim markdown settings
let g:vim_markdown_folding_disabled = 1

" FZF settings
" https://github.com/junegunn/fzf
set rtp+=~/.fzf
let g:fzf_colors =
      \ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

function! HashedString(string)
    let git_branch = "master"
    let hash_length = 20
    return substitute(system("echo -n " . a:string . " | md5sum | cut -c-" . hash_length), '\n\+$', '', '')
    unlet git_branch
    unlet hash_length
endfunc

" This is actually kind of useful - Use different swap directory
" for each git branch.
"
" TODO: Use subdirectory for specific repos
function! SetVimDir(...)
    let verbose = "false"
    if exists("a:1") && (a:1 == "verbose")
        let verbose = "true"
    endif
    if verbose == "true"
        echo "Verbose Mode"
    endif

    " It git branch, make new directory
    " If no git branch, keep default dir
    let parent_dir = substitute(expand("%:p:h"), '\n+\$', '', '')
    let git_branch = substitute((system('cd ' . parent_dir . ' | git symbolic-ref --short HEAD 2>/dev/null')), '\n\+$', '', '')
    if git_branch != ""

        let repo_name = split(system("git remote -v | grep '(fetch)'"))[1]
        let file_path = substitute(expand("%:p:h"), '\n\+$', '', '')

        let git_branch_hash = HashedString(repo_name)
        let repo_name_hash = HashedString(repo_name)
        let file_path_hash = HashedString(file_path)

        let dir_name = '/home/shawnhmh/tmp/git/' . repo_name_hash . '/' . git_branch_hash . '/' . file_path_hash

        " Make branch directory if doesn't exit
        if verbose
            echo("Verifying directory " . dir_name . " exists")
        endif
        call system('mkdir -p ' . dir_name)
        let &dir=dir_name
        unlet repo_name
        unlet dir_name
    endif

    unlet git_branch
    unlet verbose
endfunc
call SetVimDir()

" Tab and indentation settings
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab
set autoindent

" Matching braces, etc
set showmatch

" Menu autocomplete - Show all choices
set wildmode=list:longest

" Color scheme
colorscheme badwolf
